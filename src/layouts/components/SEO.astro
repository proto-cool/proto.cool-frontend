---
import { SEO as AstroSEO } from "astro-seo";

import SiteConfig, { type ContentType } from "@/site.config";
import generateJsonLD from "@lib/jsonLD";
import type { Post, Media, Tag } from "@lib/payload/payload-types";

interface SEOProps {
    type: ContentType;
    title: string;
    description: string;
    noindex?: boolean;
    post?: Post;
}

interface OpenGraphProps {
    basic: {
        title: string;
        type: string;
        url: string;
        image: string;
    };
    optional: {
        siteName: string;
        description: string;
    };
    article?: {
        publishedTime: string;
        modifiedTime: string;
        authors: string[];
        tags: string[];
    };
    image?: {
        type: string;
        width: number;
        height: number;
        alt: string;
    };
}

const { type, title, description, noindex = false, post = undefined } = Astro.props as SEOProps;

const openGraph: OpenGraphProps = {
    basic: {
        title: title,
        type: "website",
        url: Astro.url.toString(),
        image: "",
    },
    optional: {
        siteName: SiteConfig.name,
        description: description,
    },
};

const openGraphURL = new URL(Astro.url);
if (type === "post" && post) {
    openGraph.optional.description = `${post.description}${post.description.endsWith(".") ? "" : "."} A ${post.readTime}.`;

    openGraph.article = {
        publishedTime: new Date(post.createdAt).toISOString(),
        modifiedTime: new Date(post.updatedAt).toISOString(),
        authors: [SiteConfig.authorName],
        tags: [(post.tag as Tag).text],
    };

    openGraphURL.pathname = `blog/post/${post.slug}.og.png`;
    openGraph.basic.image = openGraphURL.toString();

    openGraph.image = {
        type: "image/png",
        width: 1200,
        height: 630,
        alt: `a generated OpenGraph image for the post titled "${post.title}"`,
    };
} else {
    if (Astro.url.pathname === "/") {
        openGraphURL.pathname = "index.og.png";
    } else {
        openGraphURL.pathname = Astro.url.pathname.replace(/\/$/, "") + ".og.png";
    }
    openGraph.basic.image = openGraphURL.toString();
    openGraph.image = {
        type: "image/png",
        width: 1200,
        height: 630,
        alt: `a generated OpenGraph image for the page titled "${title}"`,
    };
}

const jsonLD = generateJsonLD({
    type,
    post,
    pageURL: Astro.url,
});
---

<AstroSEO
    title={`${SiteConfig.name} &mdash; ${title}`}
    description={description}
    canonical={Astro.url.toString()}
    openGraph={openGraph}
    noindex={noindex}
    nofollow={noindex}
/>

<!-- JSON LD -->
<script type="application/ld+json" set:html={JSON.stringify(jsonLD)} is:inline />
