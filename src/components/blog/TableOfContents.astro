---
import { Heading } from "@lib/types";
interface Props {
    headings: Heading[];
    levels?: 1 | 2 | 3; // how many levels of headers you want to show in TOC.
}

const { headings, levels = 2 } = Astro.props as Props;

// filter out all tags above depth level specified
const filteredHeadings = headings.filter((heading) => heading.depth <= levels);
---

<div class="bg-theme-bg-secondary rounded-md shadow p-3 text-sm leading-tight">
    <h4 class="text-xl font-medium">
        table of <span class="text-theme-color-primary">contents</span>
    </h4>
    <ul class="mt-4 flex flex-col gap-2 !list-none !ml-0">
        {
            filteredHeadings.map((heading) => (
                <li
                    class:list={{
                        "text-lg": heading.depth === 1,
                        "pl-4": heading.depth === 2,
                        "pl-8": heading.depth === 3,
                    }}
                >
                    <a
                        href={`#${heading.slug}`}
                        class="toc-link transition hover:text-theme-color-tertiary"
                    >
                        {heading.text}
                    </a>
                </li>
            ))
        }
    </ul>
</div>

<style>
    @reference "@/styles/main.css";

    .toc-current {
        @apply text-theme-color-primary;
    }
</style>

<!-- uses intersection observer to highlight which heading is in view -->
<script>
    // Wrapper for Blog post content
    let wrappingElement: Element | null;
    let observeHeaderTags: IntersectionObserver;
    let allHeaderTags: NodeListOf<Element>;

    // Function that runs when the Intersection Observer fires
    function setCurrent(e: IntersectionObserverEntry[]) {
        var allSectionLinks = document.querySelectorAll(".toc-link");
        e.map((i) => {
            if (i.isIntersecting === true) {
                allSectionLinks.forEach((link) => link.classList.remove("toc-current"));

                // require the href matching, and ".toc-link" class
                // this is in case you have other header links elsewhere in the post
                const targetLink = document.querySelector(`a[href="#${i.target.id}"].toc-link`);

                if (targetLink) targetLink.classList.add("toc-current");
            }
        });
    }

    function initTOC() {
        wrappingElement = document.querySelector("#blog-post-content");
        if (wrappingElement !== null) {
            allHeaderTags = wrappingElement.querySelectorAll(
                ":scope > h1, :scope > h2, :scope > h3",
            );
        }

        // Intersection Observer Options
        let options: IntersectionObserverInit = {
            root: null,
            rootMargin: "0px 0px -60% 0px",
            threshold: [1],
        };

        // Each Intersection Observer runs setCurrent
        observeHeaderTags = new IntersectionObserver(setCurrent, options);
        if (wrappingElement === null) {
            return;
        }
        allHeaderTags.forEach((tag) => {
            observeHeaderTags.observe(tag);
        });
    }

    // runs on initial page load
    initTOC();

    // runs on view transitions navigation
    document.addEventListener("astro:after-swap", initTOC);
</script>
