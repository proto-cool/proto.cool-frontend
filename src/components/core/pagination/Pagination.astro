---
import Button from "@components/core/Button.astro";
import PageIndicator from "@components/core/pagination/PageIndicator.astro";
import type { PaginatedResponse } from "@lib/types";

interface Props {
    page: PaginatedResponse<any>;
    class?: string;
    baseUrl?: string;
    rest?: any;
}

const { page, class: className, baseUrl = Astro.url } = Astro.props as Props;

function getPages(currentPage: number, totalPages: number): Array<number | string> {
    const pages: Array<number | string> = [];

    // Always include the first page
    pages.push(1);

    // Add leading ellipsis if needed
    if (currentPage > 3) {
        pages.push("...");
    }

    // Determine the range of page numbers around the current page
    const start = Math.max(2, currentPage - 1);
    const end = Math.min(totalPages - 1, currentPage + 1);

    for (let i = start; i <= end; i++) {
        pages.push(i);
    }

    // Add trailing ellipsis if needed
    if (currentPage < totalPages - 2) {
        pages.push("...");
    }

    // Always include the last page
    if (totalPages > 1) {
        pages.push(totalPages);
    }

    return pages;
}

const pages = getPages(page.page, page.totalPages);
---

<nav
    class:list={[
        "flex",
        "items-center",
        "justify-between",
        "p-4",
        "bg-theme-bg-secondary",
        "rounded-lg",
        className,
    ]}
>
    <div class="flex w-0 flex-1">
        <Button
            variant="primary"
            arrow="left"
            href={`${baseUrl}/${page.prevPage}/`}
            disabled={!page.hasPrevPage}
            prefetch
        >
            previous
        </Button>
    </div>

    <div class="hidden lg:flex items-center space-x-2">
        {
            pages.map((pageNum) =>
                pageNum === "..." ? (
                    <span class="px-4 py-2 text-theme-fg-secondary">...</span>
                ) : (
                    <PageIndicator
                        page={pageNum as number}
                        href={`${baseUrl}/${pageNum}/`}
                        active={page.page === pageNum}
                    />
                ),
            )
        }
    </div>
    <div class="hidden md:flex lg:hidden items-center space-x-2 text-sm">
        Page {page.page} of {page.totalPages}
    </div>

    <div class="flex w-0 flex-1 justify-end">
        <Button
            variant="primary"
            arrow="right"
            href={`${baseUrl}/${page.nextPage}/`}
            disabled={!page.hasNextPage}
            prefetch
        >
            next
        </Button>
    </div>
</nav>
